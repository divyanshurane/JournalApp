'use strict';

var { CSSStyleDeclaration } = require('./CSSStyleDeclaration');

var allProperties = require('./allProperties');
var allExtraProperties = require('./allExtraProperties');
var implementedProperties = require('./implementedProperties');
var parsers = require('./parsers');

var dashedProperties = [...allProperties, ...allExtraProperties];
var allowedProperties = dashedProperties.map(parsers.dashedToCamelCase);
implementedProperties = Array.from(implementedProperties).map(parsers.dashedToCamelCase);
var invalidProperties = implementedProperties.filter(prop => !allowedProperties.includes(prop));

describe('CSSStyleDeclaration', () => {
  test('has only valid properties implemented', () => {
    expect(invalidProperties.length).toEqual(0);
  });

  test('has all properties', () => {
    var style = new CSSStyleDeclaration();
    allProperties.forEach(property => {
      expect(style.__lookupGetter__(property)).toBeTruthy();
      expect(style.__lookupSetter__(property)).toBeTruthy();
    });
  });

  test('has dashed properties', () => {
    var style = new CSSStyleDeclaration();
    dashedProperties.forEach(property => {
      expect(style.__lookupGetter__(property)).toBeTruthy();
      expect(style.__lookupSetter__(property)).toBeTruthy();
    });
  });

  test('has all functions', () => {
    var style = new CSSStyleDeclaration();

    expect(typeof style.item).toEqual('function');
    expect(typeof style.getPropertyValue).toEqual('function');
    expect(typeof style.setProperty).toEqual('function');
    expect(typeof style.getPropertyPriority).toEqual('function');
    expect(typeof style.removeProperty).toEqual('function');

    // TODO - deprecated according to MDN and not implemented at all, can we remove?
    expect(typeof style.getPropertyCSSValue).toEqual('function');
  });

  test('has special properties', () => {
    var style = new CSSStyleDeclaration();

    expect(style.__lookupGetter__('cssText')).toBeTruthy();
    expect(style.__lookupSetter__('cssText')).toBeTruthy();
    expect(style.__lookupGetter__('length')).toBeTruthy();
    expect(style.__lookupSetter__('length')).toBeTruthy();
    expect(style.__lookupGetter__('parentRule')).toBeTruthy();
  });

  test('from style string', () => {
    var style = new CSSStyleDeclaration();
    style.cssText = 'color: blue; background-color: red; width: 78%; height: 50vh;';
    expect(style.length).toEqual(4);
    expect(style.cssText).toEqual('color: blue; background-color: red; width: 78%; height: 50vh;');
    expect(style.getPropertyValue('color')).toEqual('blue');
    expect(style.item(0)).toEqual('color');
    expect(style[1]).toEqual('background-color');
    expect(style.backgroundColor).toEqual('red');
    style.cssText = '';
    expect(style.cssText).toEqual('');
    expect(style.length).toEqual(0);
  });

  test('from properties', () => {
    var style = new CSSStyleDeclaration();
    style.color = 'blue';
    expect(style.length).toEqual(1);
    expect(style[0]).toEqual('color');
    expect(style.cssText).toEqual('color: blue;');
    expect(style.item(0)).toEqual('color');
    expect(style.color).toEqual('blue');
    style.backgroundColor = 'red';
    expect(style.length).toEqual(2);
    expect(style[0]).toEqual('color');
    expect(style[1]).toEqual('background-color');
    expect(style.cssText).toEqual('color: blue; background-color: red;');
    expect(style.backgroundColor).toEqual('red');
    style.removeProperty('color');
    expect(style[0]).toEqual('background-color');
  });

  test('shorthand properties', () => {
    var style = new CSSStyleDeclaration();
    style.background = 'blue url(http://www.example.com/some_img.jpg)';
    expect(style.backgroundColor).toEqual('blue');
    expect(style.backgroundImage).toEqual('url(http://www.example.com/some_img.jpg)');
    expect(style.background).toEqual('blue url(http://www.example.com/some_img.jpg)');
    style.border = '0 solid black';
    expect(style.borderWidth).toEqual('0px');
    expect(style.borderStyle).toEqual('solid');
    expect(style.borderColor).toEqual('black');
    expect(style.borderTopWidth).toEqual('0px');
    expect(style.borderLeftStyle).toEqual('solid');
    expect(style.borderBottomColor).toEqual('black');
    style.font = '12em monospace';
    expect(style.fontSize).toEqual('12em');
    expect(style.fontFamily).toEqual('monospace');
  });

  test('width and height properties and null and empty strings', () => {
    var style = new CSSStyleDeclaration();
    style.height = 6;
    expect(style.height).toEqual('');
    style.width = 0;
    expect(style.width).toEqual('0px');
    style.height = '34%';
    expect(style.height).toEqual('34%');
    style.height = '100vh';
    expect(style.height).toEqual('100vh');
    style.height = '100vw';
    expect(style.height).toEqual('100vw');
    style.height = '';
    expect(1).toEqual(style.length);
    expect(style.cssText).toEqual('width: 0px;');
    style.width = null;
    expect(0).toEqual(style.length);
    expect(style.cssText).toEqual('');
  });

  test('implicit properties', () => {
    var style = new CSSStyleDeclaration();
    style.borderWidth = 0;
    expect(style.length).toEqual(1);
    expect(style.borderWidth).toEqual('0px');
    expect(style.borderTopWidth).toEqual('0px');
    expect(style.borderBottomWidth).toEqual('0px');
    expect(style.borderLeftWidth).toEqual('0px');
    expect(style.borderRightWidth).toEqual('0px');
    expect(style.cssText).toEqual('border-width: 0px;');
  });

  test('top, left, right, bottom properties', () => {
    var style = new CSSStyleDeclaration();
    style.top = 0;
    style.left = '0%';
    style.right = '5em';
    style.bottom = '12pt';
    expect(style.top).toEqual('0px');
    expect(style.left).toEqual('0%');
    expect(style.right).toEqual('5em');
    expect(style.bottom).toEqual('12pt');
    expect(style.length).toEqual(4);
    expect(style.cssText).toEqual('top: 0px; left: 0%; right: 5em; bottom: 12pt;');
  });

  test('clear and clip properties', () => {
    var style = new CSSStyleDeclaration();
    style.clear = 'none';
    expect(style.clear).toEqual('none');
    style.clear = 'lfet';
    expect(style.clear).toEqual('none');
    style.clear = 'left';
    expect(style.clear).toEqual('left');
    style.clear = 'right';
    expect(style.clear).toEqual('right');
    style.clear = 'both';
    expect(style.clear).toEqual('both');
    style.clip = 'elipse(5px, 10px)';
    expect(style.clip).toEqual('');
    expect(style.length).toEqual(1);
    style.clip = 'rect(0, 3Em, 2pt, 50%)';
    expect(style.clip).toEqual('rect(0px, 3em, 2pt, 50%)');
    expect(style.length).toEqual(2);
    expect(st